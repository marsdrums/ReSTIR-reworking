<jittershader name="downscale">
	<description>Downscale slab </description>
	<param name="tex0" type="int" default="1" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="frame" program="fp" />

		<include source="c74.noise.funcs.glsl" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(vec2(texcoord.x, texcoord.y), 0., 1.));
			}
		]]>
		</program>
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 outColor;
			uniform sampler2DRect tex0;
			uniform int frame;
			void main(void) {

				ivec2 offset[4] = ivec2[](ivec2(0,0), ivec2(1,0), ivec2(0,1), ivec2(1,1));
				uint seed = uint(frame*10+100) + uint(jit_in.texcoord.x*1002 + 39) + uint(jit_in.texcoord.y*4838 + 239);
				int randIndex = int(RandomFloat01(seed)*4);
				outColor = texelFetch(tex0, ivec2(jit_in.texcoord-0.5)*2 + offset[randIndex]);
			}
		]]>
		</program>
	</language>
</jittershader>
