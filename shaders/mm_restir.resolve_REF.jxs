<jittershader name="default">
	<description>Default Slab </description>
	<param name="colTex" type="int" default="0" />
	<param name="reservoirTex" type="int" default="1" />
	<param name="bestDirTex" type="int" default="2" />
	<param name="norDepthTex" type="int" default="3" />
	<param name="posTex" type="int" default="4" />
	<param name="albTex" type="int" default="5" />	
	<param name="environmentMap" type="int" default="6" />
	<param name="roughMetalTex" type="int" default="7" />
	<param name="noiseTex" type="int" default="8" />
	<texture file="stbn_uvec2_null_scalar_tiled.png" type="float16" unit="8" rectangle="1" filter="nearest nearest" wrap="repeat repeat"/>
	<param name="texDim" type="vec2" state="TEXDIM1" />
	<param name="mapSize" type="vec2" state="TEXDIM7" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="farClip" type="float" state="FAR_CLIP" />

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="V" type="mat4" state="VIEW_MATRIX" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" transform="INVERSE" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="textureMatrix1" type="mat4" state="TEXTURE1_MATRIX" />
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />

	<param name="spiralRadius_REF" type="float" default="50" />
	<param name="setEnvDist" type="float" default="11" />

	<language name="glsl" version="1.5">
		<bind param="reservoirTex" program="fp" />
		<bind param="bestDirTex" program="fp" />
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="mapSize" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="environmentMap" program="fp" />
		<bind param="roughMetalTex" program="fp" />
		<bind param="noiseTex" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="farClip" program="fp" />

		<bind param="MVP" program="vp" />
		<bind param="MVP" program="fp" />
		<bind param="MV" program="fp" />
		<bind param="invV" program="fp" />
		<bind param="V" program="fp" />
		<bind param="VP" program="fp" />
		<bind param="projmat" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix1" program="vp" />
		<bind param="textureMatrix1" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="eye" program="fp" />

		<bind param="spiralRadius_REF" program="fp" />
		<bind param="setEnvDist" program="fp" />

		<include source="mm_restir.constants.glsl" program="fp" />
		<include source="c74.noise.funcs.glsl" program="fp" />
		<include source="mm_restir.structures.resolve.glsl" program="fp" />
		<include source="mm_restir.common.glsl" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
	smooth vec2 uvFull;
} jit_out;

uniform mat4 MVP;
uniform mat4 textureMatrix0, textureMatrix1;
uniform vec3 farCorner;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.uv = vec2(textureMatrix1*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));
	jit_out.uvFull = vec2(textureMatrix0*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));
}
]]>
</program>
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;
layout (location = 1) out vec4 outTest;

uniform float spiralRadius_REF;
uniform float setEnvDist;

uint get_rng_seed(){
	return uint(jit_in.uv.x*371783) + uint(jit_in.uv.y*288472) + uint(frame*377112);
}

ivec2 get_random_uv(inout uint seed, float radius){
	float angle = RandomFloat01(seed)*M_TAU;
	float ra = RandomFloat01(seed)*radius + 1;
	return ivec2(cos(angle)*ra, sin(angle)*ra) + ivec2(jit_in.uv);
}

float rayPlaneIntersection(in sample this_s, vec3 ro, vec3 rd){

	float denom = dot(this_s.nor, rd);
	float t = -1;
	if (abs(denom) > 0.0001f) return dot((this_s.pos - ro), this_s.nor) / denom;
	return t;
}

sample get_sample_full_res(int index){

	sample s;
	vec2 uv = index2uv(index);
	ivec2 iuv = ivec2(jit_in.uvFull);
	vec4 lookup0 = texelFetch(colTex, iuv);
	vec4 lookup1 = texelFetch(norDepthTex, iuv);
	//vec4 lookup2 = texelFetch(velTex, iuv*2);
	vec4 lookup3 = texelFetch(posTex, iuv);
	vec4 lookup4 = texelFetch(albTex, iuv);
	vec2 lookup5 = texelFetch(roughMetalTex, iuv).xy;
	s.col = lookup0.rgb;
	s.nor = lookup1.xyz;
	//s.vel = lookup2.xy;
	s.pos = lookup3.xyz;
	s.depth = lookup1.w;
	s.index = index;
	s.uv = jit_in.uv;
	s.alb = lookup4.rgb;
	s.id = lookup4.w;
	s.view = normalize(s.pos);
	s.ref = reflect(s.view, s.nor);
	s.rou = max(0.0,lookup5.x*lookup5.x);
	s.met = lookup5.y;
	return s;
}

vec2 uvJitter(inout uint seed){
	return (vec2(RandomFloat01(seed), RandomFloat01(seed))-0.5)*30;
}

vec3 dirJitter(inout uint seed){
	return (vec3(RandomFloat01(seed), RandomFloat01(seed), RandomFloat01(seed))-0.5)*0.01;
}

sample get_sample_pos_col_full_res(int index, inout uint seed){

	sample s;
	vec2 uv = index2uv(index);
	vec2 iuv = vec2(uv*2 + uvJitter(seed));
	s.col = texture(colTex, iuv).rgb;
	s.pos = texture(posTex, iuv).xyz;

	return s;
}

void main(void) {

	int randomIndex = int( floor(texelFetch(noiseTex, ivec2( mod(jit_in.uvFull, vec2(128))) ).w * 4) );

	ivec2 offset[4] = ivec2[](	ivec2(+0, +0),
								ivec2(+1, +0),
								ivec2(+0, +1),
								ivec2(+1, +1)
								);
	
	vec2 disjointUV = ( jit_in.uvFull + offset[randomIndex] ) * 0.5;

	sample this_s = get_sample_full_res(uv2index(floor(disjointUV)));
	if(	texelFetch(norDepthTex, ivec2(jit_in.uvFull)).w > 0.9){
		outColor = vec4(0.0);
		return;
	} 

	uint seed = get_rng_seed();

	sample test_s;

	vec4 reservoir = texelFetch(reservoirTex, ivec2(disjointUV));

	outColor = vec4(0,0,0,1);

	int NUM_SAMPLES = 3;//int(mix(1, 1, this_s.rou*this_s.rou));
	float weight = 0.0001;

	vec3 invDir;
	//float hitDist = setEnvDist;
	if(reservoir.y > 0){
		test_s = get_sample_pos_col_full_res(int(reservoir.y), seed);	
		//vec3 sampleDiff = test_s.pos - this_s.pos;
		//hitDist = length(sampleDiff);	
		//invDir = -sampleDiff / hitDist;

	}

	float randAngle = RandomFloat01(seed)*M_TAU;
	vec2 randomDir = vec2(cos(randAngle), sin(randAngle));
	vec2 spiralDir[4] = vec2[] (randomDir,
								randomDir.yx,
								-randomDir,
								-randomDir.yx);

	float spiralRadius = mix(0, spiralRadius_REF, this_s.rou);//*hitDist;
	float radius = 1.0;

	ivec2 prev_sample = ivec2(-1000, -1000);
	float depthFactor = 4*farClip;
	vec3 radiance;
	float this_weight, p_hat;

	for(int i = 1; i <= NUM_SAMPLES; i++){

		vec2 sample_uv = disjointUV + spiralDir[i%4]*float(i)*spiralRadius;

		if(!valid_uv(sample_uv)) continue;

		ivec2 randUV = ivec2(sample_uv);//ivec2(jit_in.uv + disk.xy);

		ivec2 randUVfull = ivec2(sample_uv*2);//ivec2((jit_in.uv + disk.xy)*2);

		vec4 sampleNorDepth = texelFetch(norDepthTex, randUVfull);
		float angle_diff = dot(this_s.nor, sampleNorDepth.xyz);

		if(sampleNorDepth.w >= 1 || angle_diff <= 0.0 || angle_diff < 0.9) continue;
		
		vec4 reservoir = texelFetch(reservoirTex, randUV);
		
		this_weight = angle_diff * max(0.0, ( 1 - depthFactor * abs(this_s.depth - sampleNorDepth.w) ));

		if(reservoir.y >= 0){ //if the sample is from the viewport

			test_s = get_sample_pos_col_full_res(int(reservoir.y), seed);
			radiance = get_specular_radiance(this_s, test_s);// * max(0.5, dot(test_s.nor, this_s.nor));	

		} else {

			vec3 best_dir = texelFetch(bestDirTex, randUV).xyz;
			test_s = get_environment_sample(best_dir, seed, this_s.rou);
			radiance = get_radiance_for_env(this_s, test_s);// * max(0.5, dot(test_s.nor, this_s.nor));
		}

		float p_hat = length(radiance);
		reservoir.w = p_hat > 0.0 ? reservoir.x / max(0.0001, p_hat*reservoir.z) : 0.0;
		radiance *= reservoir.w;
		outColor.rgb += radiance*this_weight;
		weight += this_weight;
	}


	reservoir = texelFetch(reservoirTex, ivec2(disjointUV) );

	if(reservoir.y >= 0){ //if the sample is from the viewport

		test_s = get_sample_pos_col_full_res(int(reservoir.y), seed);
		radiance = get_specular_radiance(this_s, test_s);// * max(0.5, dot(test_s.nor, this_s.nor));

	} else {

		vec3 best_dir = texelFetch(bestDirTex, ivec2(disjointUV)).xyz;
		test_s = get_environment_sample(best_dir, seed, this_s.rou);
		radiance = get_radiance_for_env(this_s, test_s);// * max(0.5, dot(test_s.nor, this_s.nor));
	}

	p_hat = length(radiance);
	reservoir.w = p_hat > 0.0 ? reservoir.x / max(0.0001, p_hat*reservoir.z) : 0.0;
	radiance *= reservoir.w;
	outColor.rgb += radiance;
	weight += 1;

	outColor.rgb /= weight;

}
]]>
</program>
</language>
</jittershader>
