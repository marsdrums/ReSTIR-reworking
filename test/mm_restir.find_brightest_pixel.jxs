<jittershader name="default">
	<description>Default Slab </description>
	<param name="dummy" type="int" default="0" />
	<param name="uvLenTex" type="int" default="1" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texDim" type="vec2" state="TEXDIM1" />
	<language name="glsl" version="1.5">
		<bind param="dummy" program="fp" />
		<bind param="uvLenTex" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="texDim" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 position;
in vec2 uv;
out jit_PerVertex {
	vec2 uv;
} jit_out;

uniform mat4 modelViewProjectionMatrix;
uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform sampler2DRect dummy, uvLenTex;
uniform vec2 texDim;

void main(void) {

	ivec2 scaledUV = ivec2(jit_in.uv*2);
	vec3 best = texelFetch(uvLenTex, scaledUV).rgb;
	vec3 candidate;
	ivec2 limit = ivec2(texDim - 1);
	candidate = texelFetch(uvLenTex, min(scaledUV + ivec2(1,0), limit)).rgb;
	best = candidate.b > best.b ? candidate : best;
	candidate = texelFetch(uvLenTex, min(scaledUV + ivec2(0,1), limit)).rgb;
	best = candidate.b > best.b ? candidate : best;
	candidate = texelFetch(uvLenTex, min(scaledUV + ivec2(1,1), limit)).rgb;
	best = candidate.b > best.b ? candidate : best;

	outColor.rgb = best;
	outColor.a = 1;
}
]]>
</program>
</language>
</jittershader>
